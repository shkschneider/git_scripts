#!/bin/bash
#
# git-workflow -- shk's git workflow (rebase)
# Copyright (C) 2012  Alan SCHNEIDER
#                     <shk.schneider[at]gmail.com>
#
# This program comes with ABSOLUTELY NO WARRANTY.
# This is free software, and you are welcome to redistribute it
# under certain conditions.
#

[ -z "$(which git)" ] && echo "git-workflow: command 'git' not found" >&2 && exit 1

function usage() {
    echo "Usage: git-workflow <COMMAND [...]>" >&2
    # commands starting with '-' make no changes on repository
    echo "" >&2
    echo "       -h, --help            -- this help" >&2
    echo "       -m, --model           -- this workflow's model" >&2
    echo "       -w, --what            -- what to do now (branch-specific help)" >&2
    echo "       -l, --list            -- relative statuses of all branches (graph)" >&2
    echo "       -s, --status [BRANCH] -- relative status of a branch (default is current)" >&2
    echo "" >&2
    # those commands can make changes on local and/or remote
    echo "       init [--force]            -- init a repository compliant with this workflow" >&2
    echo "       up[date]                  -- get updates from upstream branches" >&2
    echo "       pu[blish] [TAG ...]       -- publish updates in upstream branches" >&2
    echo "       n[ew-]h[otfix] <ID-DESC>  -- create a new private branch (from master)" >&2
    echo "       n[ew-]r[elease] <TAG>     -- create a new private branch (from devel)" >&2
    echo "       n[ew-]f[eature] <ID-DESC> -- create a new private branch (from devel)" >&2
    echo "       n[ew-]b[ugfix] <ID-DESC>  -- create a new private branch (from devel)" >&2
    # if squash or rebase failed, run 'rm -rf .git/rebase-*'
}

function gw_list() {
    local type commit_hash ahead remote local
    type=$(echo $branch | cut -d'-' -f1)
    commit_hash=$(git rev-list --max-count=1 $branch 2>/dev/null | cut -c1-7)
    case $type in
	"master")
	    ahead=$(git log --oneline $branch...origin/master | wc -l | awk '{print $1}') ;;
	"devel"|"hotfix"|"release")
	    ahead=$(git log --oneline $branch...master | wc -l | awk '{print $1}') ;;
	"feature"|"bugfix")
	    ahead=$(git log --oneline $branch...devel | wc -l | awk '{print $1}') ;;
	*)
	    ahead="?" ;;
    esac
    case $type in
	"master")           echo -n "" ;;
	"devel")            echo -n "\`-----" ;;
	"hotfix"|"release") echo -n "|\`--" ;;
	"feature"|"bufix")  echo -n "      \`--" ;;
	*)                  echo -n "??? " ;;
    esac
    remote=$(git ls-remote 2>/dev/null | egrep "refs/remotes/origin/$branch\$" | cut -c1-7)
    local=$(git rev-parse $branch | cut -c1-7)
    [ -n "$remote" ] && branch="origin/$branch"
    echo "$branch [$commit_hash] +$ahead"
}

function gw_publish_master() {
    echo "== git-workflow == preparing '$current' to be published to 'origin/master'"
    git checkout $current
    git rebase origin/master || exit 1
    git checkout master
    #git pull --rebase origin master || exit 1
    echo "== git-workflow == publishing '$current' to 'master'"
    git rebase $current || exit 1
    echo "== git-workflow == tagging 'master' with 'git tag $@'"
    git tag --force $@ HEAD || exit 1
}

function gw_publish_devel() {
    local commits
    echo "== git-workflow == preparing '$current' to be published to 'origin/devel'"
    git checkout $current
    git rebase origin/devel || exit 1
    # squash commits
    commits=$(git log --oneline HEAD...origin/devel | wc -l | awk '{print $1}')
    [ $commits -eq 0 ] && echo "git-workflow: nothing changed from 'origin/devel'" >&2 && exit 1
    [ $commits -eq 1 ] && git commit --amend
    [ $commits -ge 2 ] && git rebase --interactive HEAD~$commits
    git checkout devel
    #git pull --rebase origin devel || exit 1
    echo "== git-workflow == publishing '$current' to 'devel'"
    git rebase $current || exit 1
}

function gw_status_branch() {
    local ahead
    ahead=$(git log --oneline HEAD...$1 | wc -l | awk '{print $1}')
    if [ $ahead -gt 0 ] ; then
	echo "[ KO ] Ahead of '$1' (by $ahead commits)"
	#for commit in $(git log --oneline HEAD...$1 | cut -c1-7) ; do
	#    hash=$(echo $commit | cut -d'_' -f1)
	#    msg=$(git show --oneline $commit | head -1 | cut -d' ' -f2-)
	#    echo "       * [$hash] $msg"
	#done
    else
	echo "[ OK ] In synch with '$1'"
    fi
}

function gw_status_index() {
    if [ -n "$(git status --porcelain | egrep -v '^\?\?')" ] ; then
	echo "[ KO ] Index NOT clean"
    else
	echo "[ OK ] Index clean"
    fi
}

function gw_check_branch() {
    local conflict commits type
    if [ -z "$1" ] ; then
	conflict=$(git status --short | egrep '^(.U|U.)')
	commits=$(git log --oneline | wc -l | awk '{print $1}')
	echo "git-workflow: no branch selected" >&2
	[ -n "$conflict" ] && echo "    you are in the middle of a conflict: fix it" >&2
	[ $commits -eq 0 ] && echo "    repository is naked: try 'git-workflow update' or 'git-workflow init'" >&2
	exit 1
    fi
    type=$(echo $1 | cut -d'-' -f1)
    case $type in
        "master"|"hotfix"|"release"|"devel"|"feature"|"bugfix") ;;
        *) echo "git-workflow: '$1' branch not recognized" >&2 && exit 1 ;;
    esac
    [ -z "$(git branch | cut -c3- | egrep "^$1\$")" ] && echo "git-workflow: '$1' branch does not exists" >&2 && exit 1
}

function gw_check_repository() {
    [ -z "$dir" ] && echo "git-workflow: not a git repository" >&2 && exit 1
    [ -z "$(git remote)" ] && echo "git-workflow: remote 'origin' does not exists" >&2 && exit 1
    [ -z "$(git tag -l 0)" ] && echo "git-workflow: not a compliant repository" >&2 && exit 1
    current=$(git symbolic-ref HEAD 2> /dev/null | cut -b 12-)
    type=$(echo $current | cut -d'-' -f1)
    tag_hash=$(git rev-list --tags --max-count=1 2>/dev/null)
    [ -n "$tag_hash" ] && tag=$(git describe --tags $tag_hash) || tag=""
}

[ $# -eq 0 ] && usage && exit 1

dir=$(git rev-parse --git-dir 2>/dev/null)

case $1 in
    "init")
        [ -z "$dir" ] && echo "git-workflow: not a git repository" >&2 && exit 1
	[ -n "$(git status --porcelain | egrep -v '^\?\?')" ] && echo "git-workflow: they are some things left to commit" >&2 && exit 1
        ;;
    "-l"|"--list")
	gw_check_repository
	gw_check_branch master
	gw_check_branch devel
	;;
    "-s"|"--status")
	gw_check_repository
        [ -n "$2" ] && current="$2"
	gw_check_branch master
	gw_check_branch devel
	[ "$current" != "master" ] && [ "$current" != "devel" ] && gw_check_branch $current
	;;
    "-w"|"--what")
        gw_check_repository
        ;;
    "up"|"update"|"pu"|"publish"|"nh"|"new-hotfix"|"nr"|"new-release"|"nf"|"new-feature"|"nb"|"new-bugfix")
	gw_check_repository
	gw_check_branch master
	gw_check_branch devel
	[ "$current" != "master" ] && [ "$current" != "devel" ] && gw_check_branch $current
	[ -n "$(git status --porcelain | egrep -v '^\?\?')" ] && echo "git-workflow: they are some things left to commit" >&2 && exit 1
	;;
esac
case $1 in
    "-m"|"--model")
	echo "Shk's Git Workflow - (Pull-)Rebase"
	echo "  Public branches:"
	echo "    origin/master -- production version (stable)"
	echo "    origin/devel  -- latest version (dev)"
	echo "  Private branches:"
	echo "    hotfix-ID-DESC [master] -- production bug fix"
	echo "    release-TAG [devel]     -- next release version (freeze)"
	echo "    feature-ID-DESC [devel] -- new feature"
	echo "    bugfix-ID-DESC [devel]  -- development bug fix"
	;;
    "-w"|"--what")
        if [ -z "$(git branch | egrep "^..devel$")" ] ; then
	    commits=$(git log --oneline 2>/dev/null | wc -l | awk '{print $1}')
            if [ $commits -eq 0 ] ; then
                echo "git-workflow init            -- init a compliant repository"
            else
                echo "git-workflow init --force    -- init a compliant repository"
            fi
        fi
	case $type in
	    "master")
		echo "git-workflow up[date]        -- pull from origin"
		echo "git-workflow pu[blish] [TAG] -- push to origin (latest tag is '$tag')"
		;;
	    "hotfix"|"release")
		echo "git-workflow pu[blish] <TAG> -- merge into master and devel (latest tag is '$tag')"
		;;
	    "devel")
		echo "git-workflow up[date]      -- pull from origin"
		echo "git-workflow pu[blish]     -- push to origin"
		;;
	    "feature"|"bugfix")
		echo "git-workflow pu[blish]     -- merge into devel (interactive rebase)"
		;;
	esac
	echo "git-workflow n[ew-]h[otfix]  -- fix a bug on 'master' branch"
	echo "git-workflow n[ew-]r[elease] -- freeze 'devel' branch into a new release"
	echo "git-workflow n[ew-]f[eature] -- clone 'devel' branch to add a new feature"
	echo "git-workflow n[ew-]b[ugfix]  -- fix a bug on 'devel' branch"
	;;
    "-l"|"--list")
	# known types
	for type in master hotfix release devel feature bugfix ; do
	    branches=$(git branch -a | cut -c3- | cut -d'/' -f3 | egrep "^$type" | sort -u)
	    for branch in $branches ; do
		gw_list $branch
                unset branch
	    done
            unset branches
	done
        unset type
	# unknown types
	for branch in $(git branch -a | cut -c3- | rev | cut -d'/' -f1 | rev | sort -u | egrep -v '^(master$|devel$|hotfix-|release-|feature-|bugfix-)') ; do
	    gw_list $branch
            unset branch
	done
	;;
    "-s"|"--status")
	case $type in
	    "master")
		echo "Public branch: $current (latest tag is '$tag')"
		gw_status_branch origin/master
		commit_hash=$(git rev-list --max-count=1 HEAD 2>/dev/null)
		if [ -n "$tag_hash" ] && [ -n "$commit_hash" ] && [ "$tag_hash" != "$commit_hash" ] ; then
		    echo "[ KO ] Latest commit is NOT tagged (latest tag is '$tag')"
		    echo "       $ git tag TAG HEAD"
		else
		    echo "[ OK ] Latest commit is tagged '$tag'"
		fi
                unset commit_hash
		;;
	    "devel")
		echo "Public branch: $current"
		gw_status_branch origin/devel
                gw_status_branch master
		;;
	    "hotfix"|"release")
		echo "Private branch: $current (latest tag is '$tag')"
		gw_status_branch master
		;;
	    "feature"|"bugfix")
		echo "Private branch: $current"
		gw_status_branch devel
		;;
	esac
	gw_status_index
	;;
    "init")
	[ -n "$2" ] && [ "$2" = "--force" ] && force="true" || force="false"
	if [ -n "$(git branch)" ] ; then
	    commits=$(git log --oneline | wc -l | awk '{print $1}')
            if [ $commits -ne 0 ] && [ "$force" = "false" ] ; then
                echo "git-workflow: repository already has history ($commits commits)" >&2
                echo "git-workflow: please use the '--force' option" >&2
                exit 1
            fi
            unset commits
        fi
        tmp=$(mktemp -p .)
        git add "$tmp"
        git commit -m "* Init master"
        git rm "$tmp"
        git commit -m "* Cleanup master"
        echo "== git-workflow == publishing 'master' to 'origin/master'"
        [ "$force" = "true" ] && git push --force origin master || git push origin master
        [ $? -ne 0 ] && exit 1
        gw_check_branch master
        git checkout --track -b devel master
        tmp=$(mktemp -p .)
        git add "$tmp"
	git commit -m "* Init devel"
        git rm "$tmp"
        git commit -m "* Cleanup devel"
        echo "== git-workflow == publishing 'devel' to 'origin/devel'"
        [ "$force" = "true" ] && git push --force origin devel || git push origin devel
        [ $? -ne 0 ] && exit 1
	echo "== git-workflow == updating 'master' from 'origin/devel'"
        git checkout master
        git merge devel || exit 1
        echo "== git-workflow == tagging '$(git rev-parse HEAD | cut -c1-7)' as '0'"
        git tag --force 0
        git push --tags origin master
        [ $? -ne 0 ] && exit 1
        git checkout devel
        echo "== git-workflow == you are now on 'devel' branch"
        unset tmp
        rtags=$(git ls-remote --tags origin | egrep -v "refs/tags/0$" | rev | cut -d'/' -f1 | rev)
        if [ -n "$rtags" ] ; then
            tags=""
            refs=""
            for tag in $rtags ; do
                tags="$tags$tag "
                refs="$refs:refs/tags/$tag "
                unset tag
            done
            echo "git-workflow: you can remove all old remote tags with:"
            echo "    git tag -d $tags"
            echo "    git push origin $refs"
            unset tags refs
        fi
        unset rtags
	;;
    "up"|"update")
	case $type in
	    "master"|"devel")             parent="$current" ;;
	    "hotfix")                     parent="master" ;;
	    "release"|"feature"|"bugfix") parent="devel" ;;
	esac
	echo "== git-workflow == updating '$current' from 'origin/$parent'"
	git pull --rebase origin $parent || exit 1
        unset parent
	;;
    "pu"|"publish")
	case $type in
	    "master"|"devel")             parent="$current" ;;
	    "hotfix")                     parent="master" ;;
	    "release"|"feature"|"bugfix") parent="devel" ;;
	esac
        commits=$(git log --oneline HEAD...origin/$parent | wc -l | awk '{print $1}')
	case $type in
	    "master")
		shift
                [ $commits -eq 0 ] && echo "git-workflow: nothing to publish to 'origin/$parent'" >&2 && exit 0
		echo "== git-workflow == publishing 'master' to 'origin/master'"
		if [ $# -gt 0 ] ; then
		    echo "== git-workflow == tagging 'master' with 'git tag $@'"
		    git tag --force $@ HEAD || exit 1
		fi
		git push --tags origin master || exit 1
                git checkout devel
                echo "== git-workflow == updating 'devel' from '$current'"
                git pull --rebase origin master || exit 1
                git pull || exit 1
                echo "== git-workflow == publishing 'devel' to 'origin/devel'"
                git push origin devel || exit 1
                echo "== git-workflow == you are on 'devel' branch"
		;;
	    "devel")
                [ $commits -eq 0 ] && echo "git-workflow: nothing to publish to 'origin/$parent'" >&2 && exit 0
		echo "== git-workflow == publishing 'devel' to 'origin/devel'"
		git push origin devel || exit 1
		;;
	    "hotfix"|"release")
		shift
                [ $commits -eq 0 ] && echo "git-workflow: nothing to publish to '$parent'" >&2 && exit 0
		[ $# -lt 1 ] && echo "git-workflow: missing TAG parameter" >&2 && exit 1
		gw_publish_devel
		gw_publish_master $@
		echo "== git-workflow == removing '$current' branch"
		git branch -d $current
		echo "== git-workflow == you are on 'master' branch"
		;;
	    "feature"|"bugfix")
                [ $commits -eq 0 ] && echo "git-workflow: nothing to publish to '$parent'" >&2 && exit 0
		gw_publish_devel
		echo "== git-workflow == removing '$current' branch"
		git branch -d $current
		echo "== git-workflow == you are on 'devel' branch"
		;;
	esac
	;;
    "nh"|"new-hotfix"|"nr"|"new-release"|"nf"|"new-feature"|"nb"|"new-bugfix")
	case $1 in
	    "nh"|"new-hotfix")  type="hotfix" ;;
	    "nr"|"new-release") type="release" ;;
	    "nf"|"new-feature") type="feature" ;;
	    "nb"|"new-bugfix")  type="bugfix" ;;
	esac
	desc=$(echo $2)
	[ -z "$desc" ] && usage && exit 1
	case $type in
	    "hotfix")                     parent="master" ;;
	    "release"|"feature"|"bugfix") parent="devel" ;;
	esac
        branch="$type-$desc"
        [ -n "$(git show-ref $branch)" ] && echo "git-workflow: branch '$branch' already exists" >&2 && exit 1
        [ "$type" = "release" ] && [ "$desc" = "$tag" ] && echo "git-workflow: release '$desc' already exists as tag '$tag' [$(echo $tag_hash | cut -c1-7)]" >&2 && exit 1
	git checkout $parent
	echo "== git-workflow == updating '$parent' from 'origin/$parent'"
	#git rebase origin/$parent || exit 1
        git pull --rebase origin $parent || exit 1
        git pull || exit 1
	echo "== git-workflow == creating $type branch '$branch' from '$parent'"
	git checkout --track -b $branch $parent
	echo "== git-workflow == you are on '$branch' branch"
        unset desc parent branch
	;;
    "-h"|"--help")
	usage
	;;
    *)
	usage
	exit 1
	;;
esac

# EOF
